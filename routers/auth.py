# routers/auth.py
"""
Router para autentica칞칚o e gest칚o de usu치rios
"""

from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Body, Form, Request
from fastapi.security import OAuth2PasswordBearer
from typing import Optional
import schemas
import crud
from database import get_db
from auth import get_current_user_firebase, get_optional_current_user_firebase
from firebase_admin import firestore, auth
import logging
import uuid
import os
import json

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", auto_error=False)

logger = logging.getLogger(__name__)

router = APIRouter(tags=["Usu치rios"])

@router.post("/users/sync-profile", response_model=schemas.UsuarioProfile)
async def sync_profile(
    request: Request,
    db: firestore.client = Depends(get_db),
    token: str = Depends(oauth2_scheme)
):
    """
    Sincroniza o perfil do usu치rio autenticado via Firebase.
    Se 칠 a primeira vez, cria o usu치rio. Se j치 existe, retorna os dados atualizados.
    """
    # DEBUG: Log dos dados RAW da request
    raw_body = await request.body()
    import json
    try:
        raw_data = json.loads(raw_body)
        logger.critical(f"游댌 DEBUG SYNC-PROFILE - RAW request body: {raw_data}")
    except:
        logger.critical(f"游댌 DEBUG SYNC-PROFILE - RAW body (n칚o JSON): {raw_body}")
    
    # Validar com Pydantic
    try:
        user_data = schemas.UsuarioSync.parse_obj(raw_data)
        logger.critical(f"游댌 DEBUG SYNC-PROFILE - user_data AP칍S Pydantic: {user_data.dict()}")
    except Exception as e:
        logger.critical(f"游댌 DEBUG SYNC-PROFILE - ERRO Pydantic: {e}")
        raise HTTPException(status_code=400, detail=f"Dados inv치lidos: {e}")
    
    try:
        # Validar o token Firebase primeiro
        if not token:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token de autentica칞칚o n칚o fornecido."
            )
        
        try:
            decoded_token = auth.verify_id_token(token)
            firebase_uid_token = decoded_token['uid']
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail=f"Token inv치lido ou expirado: {e}"
            )
        
        # Verificar se o firebase_uid do token corresponde ao enviado nos dados
        if firebase_uid_token != user_data.firebase_uid:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Firebase UID no token n칚o corresponde aos dados enviados."
            )
        
        # LOG CR칈TICO: Rastrear se este endpoint est치 sendo chamado
        logger.critical(f"游뚿 SYNC-PROFILE CHAMADO - firebase_uid: {user_data.firebase_uid}, email: {user_data.email}")
        
        # Usar a fun칞칚o CRUD atualizada que j치 maneja toda a l칩gica
        usuario = crud.criar_ou_atualizar_usuario(db, user_data)
        logger.info(f"Perfil sincronizado para o usu치rio {usuario.get('email', 'N/A')}")
        return usuario
        
    except ValueError as ve:
        logger.warning(f"Erro de valida칞칚o na sincroniza칞칚o: {ve}")
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        logger.error(f"Erro inesperado na sincroniza칞칚o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@router.get("/me/profile", response_model=schemas.UsuarioProfile)
def get_my_profile(current_user: schemas.UsuarioProfile = Depends(get_current_user_firebase)):
    """Retorna o perfil completo do usu치rio autenticado."""
    return current_user

@router.put("/me/profile", response_model=schemas.UsuarioProfile)
@router.patch("/me/profile", response_model=schemas.UsuarioProfile)
def update_my_profile(
    profile_data: schemas.UsuarioProfileUpdate,
    current_user: schemas.UsuarioProfile = Depends(get_current_user_firebase),
    db: firestore.client = Depends(get_db)
):
    """Atualiza o perfil do usu치rio autenticado (apenas campos fornecidos)."""
    try:
        logger.critical(f"游댌 DEBUG UPDATE PROFILE - Chamado para user_id: {current_user.id}")
        logger.critical(f"游댌 DEBUG UPDATE PROFILE - Dados recebidos: {profile_data.dict(exclude_unset=True)}")
        
        updated_user = crud.atualizar_perfil_usuario(db, current_user.id, profile_data)
        
        if not updated_user:
            raise HTTPException(status_code=404, detail="N칚o foi poss칤vel atualizar o perfil")
            
        logger.critical(f"游댌 DEBUG UPDATE PROFILE - Perfil atualizado com sucesso")
        return updated_user
        
    except ValueError as ve:
        logger.error(f"Erro de valida칞칚o na atualiza칞칚o de perfil: {ve}")
        raise HTTPException(status_code=400, detail=str(ve))
    except Exception as e:
        logger.error(f"Erro inesperado na atualiza칞칚o de perfil: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@router.post("/me/register-fcm-token", status_code=status.HTTP_200_OK)
def registrar_fcm_token(
    token_data: schemas.FCMTokenRequest,
    current_user: schemas.UsuarioProfile = Depends(get_current_user_firebase),
    db: firestore.client = Depends(get_db)
):
    """Registra um token FCM para o usu치rio autenticado."""
    crud.adicionar_fcm_token(db, current_user.firebase_uid, token_data.fcm_token)
    return {"message": "Token FCM registrado com sucesso"}

@router.patch("/me/consent", response_model=schemas.UsuarioProfile)
def atualizar_meu_consentimento_lgpd(
    consent_data: schemas.ConsentimentoLGPDUpdate,
    current_user: schemas.UsuarioProfile = Depends(get_current_user_firebase),
    db: firestore.client = Depends(get_db)
):
    """Atualiza o consentimento LGPD do usu치rio autenticado."""
    result = crud.atualizar_consentimento_lgpd(db, current_user.id, consent_data)
    if not result:
        raise HTTPException(status_code=404, detail="N칚o foi poss칤vel atualizar o consentimento")
    return result