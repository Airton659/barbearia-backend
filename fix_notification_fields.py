#!/usr/bin/env python3
"""
Script para corrigir campos de notifica√ß√µes existentes no Firestore.

Este script:
1. Busca todas as notifica√ß√µes que t√™m campos 'titulo/corpo'
2. Adiciona os campos 'title/body' correspondentes
3. Mant√©m os campos antigos para compatibilidade
"""

import firebase_admin
from firebase_admin import firestore
import sys
import os

def initialize_firebase():
    """Inicializa o Firebase Admin SDK"""
    try:
        if not firebase_admin._apps:
            firebase_admin.initialize_app()
        return firestore.client()
    except Exception as e:
        print(f"Erro ao inicializar Firebase: {e}")
        sys.exit(1)

def find_notifications_to_fix(db):
    """
    Encontra notifica√ß√µes que precisam ser corrigidas
    """
    print("üîç Procurando notifica√ß√µes com campos titulo/corpo...")
    
    notifications_to_fix = []
    
    # Buscar todos os usu√°rios
    users_collection = db.collection('usuarios')
    
    for user_doc in users_collection.stream():
        user_id = user_doc.id
        
        # Buscar notifica√ß√µes do usu√°rio
        notifications_collection = user_doc.reference.collection('notificacoes')
        
        for notif_doc in notifications_collection.stream():
            notif_data = notif_doc.to_dict()
            notif_id = notif_doc.id
            
            # Verificar se tem 'titulo' mas n√£o tem 'title'
            needs_fix = False
            fix_data = {}
            
            if 'titulo' in notif_data and 'title' not in notif_data:
                fix_data['title'] = notif_data['titulo']
                needs_fix = True
                
            if 'corpo' in notif_data and 'body' not in notif_data:
                fix_data['body'] = notif_data['corpo']
                needs_fix = True
            
            if needs_fix:
                notifications_to_fix.append({
                    'user_id': user_id,
                    'notif_id': notif_id,
                    'doc_ref': notif_doc.reference,
                    'fix_data': fix_data,
                    'original_data': notif_data
                })
                
                print(f"üìù Usu√°rio {user_id}: Notifica√ß√£o {notif_id} precisa ser corrigida")
    
    return notifications_to_fix

def fix_notifications(db, notifications_to_fix, dry_run=True):
    """
    Corrige as notifica√ß√µes encontradas
    """
    if not notifications_to_fix:
        print("‚úÖ Nenhuma notifica√ß√£o precisa ser corrigida!")
        return
    
    print(f"\nüìä Encontradas {len(notifications_to_fix)} notifica√ß√µes para corrigir")
    
    if dry_run:
        print("üß™ MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° feita")
    else:
        print("‚ö†Ô∏è MODO REAL - Notifica√ß√µes ser√£o corrigidas permanentemente!")
    
    success_count = 0
    
    for notification in notifications_to_fix:
        user_id = notification['user_id']
        notif_id = notification['notif_id']
        fix_data = notification['fix_data']
        
        print(f"\nüîÑ Corrigindo: Usu√°rio {user_id}, Notifica√ß√£o {notif_id}")
        print(f"  Adicionando campos: {list(fix_data.keys())}")
        
        if not dry_run:
            try:
                notification['doc_ref'].update(fix_data)
                print(f"  ‚úÖ Notifica√ß√£o corrigida com sucesso")
                success_count += 1
            except Exception as e:
                print(f"  ‚ùå Erro ao corrigir notifica√ß√£o: {e}")
        else:
            print(f"  üß™ SIMULA√á√ÉO: Adicionaria campos {fix_data}")
            success_count += 1
    
    print(f"\nüìä RESUMO:")
    print(f"Total de notifica√ß√µes processadas: {len(notifications_to_fix)}")
    print(f"Corre√ß√µes bem-sucedidas: {success_count}")
    
    if dry_run:
        print("\nüí° Para executar a corre√ß√£o real, execute: python fix_notification_fields.py --execute")
    else:
        print("\n‚úÖ Corre√ß√£o conclu√≠da! As notifica√ß√µes agora t√™m os campos corretos.")

def main():
    """Fun√ß√£o principal"""
    
    # Verificar argumentos
    dry_run = '--execute' not in sys.argv
    
    if dry_run:
        print("üß™ Executando em MODO SIMULA√á√ÉO")
    else:
        print("‚ö†Ô∏è Executando em MODO REAL - CUIDADO!")
        response = input("Tem certeza que deseja corrigir as notifica√ß√µes? Digite 'SIM' para confirmar: ")
        if response != 'SIM':
            print("Opera√ß√£o cancelada.")
            return
    
    # Inicializar Firebase
    db = initialize_firebase()
    print("‚úÖ Firebase inicializado com sucesso")
    
    # Encontrar notifica√ß√µes para corrigir
    notifications_to_fix = find_notifications_to_fix(db)
    
    # Corrigir notifica√ß√µes
    fix_notifications(db, notifications_to_fix, dry_run)
    
    print("\n‚úÖ Script conclu√≠do!")

if __name__ == "__main__":
    main()