# main_modular.py - Vers√£o Modular da API
"""
FastAPI modular organizada com routers separados por dom√≠nio de neg√≥cio.
"""

from fastapi import FastAPI
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
import os
import logging
from database import initialize_firebase_app

# Importar todos os routers
from routers import (
    admin,
    auth,
    profissionais,
    agendamentos,
    pacientes,
    medicos,
    interacoes,
    notifications,
    utilitarios,
    servicos
)

# --- Configura√ß√£o da Aplica√ß√£o ---
app = FastAPI(
    title="API de Agendamento Multi-Tenant",
    description="Backend modular para m√∫ltiplos neg√≥cios de agendamento, usando Firebase e Firestore.",
    version="3.0.0"  # Vers√£o modular
)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Evento de Startup ---
@app.on_event("startup")
def startup_event():
    """Inicializa a conex√£o com o Firebase ao iniciar a aplica√ß√£o."""
    initialize_firebase_app()
    logger.info("üöÄ API Modular iniciada com sucesso!")

# --- Endpoint Raiz ---
@app.get("/")
def root():
    return {
        "mensagem": "API de Agendamento Multi-Tenant (Vers√£o Modular)",
        "versao": "3.0.0",
        "arquitetura": "modular",
        "routers": [
            "admin", "auth", "profissionais", "agendamentos", 
            "pacientes", "medicos", "interacoes", "notifications", "utilitarios"
        ]
    }

# --- Servir Arquivos Est√°ticos ---
@app.get("/uploads/profiles/{filename}", tags=["Arquivos"])
def get_profile_image(filename: str):
    """Serve as imagens de perfil salvas localmente."""
    file_path = os.path.join("uploads", "profiles", filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    else:
        from fastapi import HTTPException
        raise HTTPException(status_code=404, detail="Imagem n√£o encontrada")

@app.get("/uploads/fotos/{filename}", tags=["Arquivos"])
def get_foto(filename: str):
    """Serve fotos gerais salvas localmente."""
    file_path = os.path.join("uploads", "fotos", filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    else:
        from fastapi import HTTPException
        raise HTTPException(status_code=404, detail="Foto n√£o encontrada")

@app.get("/uploads/relatorios/{filename}", tags=["Arquivos"])
def get_relatorio_photo(filename: str):
    """Serve fotos de relat√≥rios m√©dicos."""
    file_path = os.path.join("uploads", "relatorios", filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    else:
        from fastapi import HTTPException
        raise HTTPException(status_code=404, detail="Foto do relat√≥rio n√£o encontrada")

@app.get("/uploads/arquivos/{filename}", tags=["Arquivos"])
def get_arquivo(filename: str):
    """Serve arquivos gerais salvos localmente."""
    file_path = os.path.join("uploads", "arquivos", filename)
    if os.path.exists(file_path):
        return FileResponse(file_path)
    else:
        from fastapi import HTTPException
        raise HTTPException(status_code=404, detail="Arquivo n√£o encontrado")

# --- Incluir Routers ---

# Administra√ß√£o da Plataforma e Gest√£o do Neg√≥cio
app.include_router(admin.platform_admin_router)
app.include_router(admin.business_admin_router)

# Autentica√ß√£o e Usu√°rios
app.include_router(auth.router)

# Profissionais
app.include_router(profissionais.public_router)
app.include_router(profissionais.self_management_router)

# Agendamentos
app.include_router(agendamentos.router)
app.include_router(agendamentos.professional_router)

# Pacientes, Fichas e Anamneses
app.include_router(pacientes.router)

# M√©dicos e Relat√≥rios M√©dicos
app.include_router(medicos.router)

# Intera√ß√µes Sociais (Feed, Coment√°rios, Avalia√ß√µes)
app.include_router(interacoes.router)

# Notifica√ß√µes
app.include_router(notifications.router)

# Utilit√°rios (Uploads, Pesquisas, etc.)
app.include_router(utilitarios.router)

# Servi√ßos e Hor√°rios
app.include_router(servicos.router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)