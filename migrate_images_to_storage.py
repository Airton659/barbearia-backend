#!/usr/bin/env python3
"""
Script para migrar imagens de perfil do sistema local para o Google Cloud Storage.

Este script:
1. Busca por usu√°rios que t√™m URLs locais de imagem
2. Verifica se a imagem existe localmente
3. Faz upload para o Cloud Storage
4. Atualiza o campo profile_image no Firestore
"""

import firebase_admin
from firebase_admin import firestore, credentials
import os
import sys
from google.cloud import storage
import re

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def initialize_firebase():
    """Inicializa o Firebase Admin SDK"""
    try:
        if not firebase_admin._apps:
            firebase_admin.initialize_app()
        return firestore.client()
    except Exception as e:
        print(f"Erro ao inicializar Firebase: {e}")
        sys.exit(1)

def find_users_with_local_images(db):
    """
    Encontra usu√°rios que t√™m URLs locais de imagem de perfil
    """
    print("üîç Procurando usu√°rios com imagens locais...")
    
    users_with_local_images = []
    local_url_pattern = r'https://barbearia-backend-service-.*\.run\.app/uploads/profiles/'
    
    # Buscar todos os usu√°rios
    users_collection = db.collection('usuarios')
    
    for doc in users_collection.stream():
        user_data = doc.to_dict()
        user_id = doc.id
        profile_image = user_data.get('profile_image')
        
        if profile_image and re.match(local_url_pattern, profile_image):
            # Extrair nome do arquivo da URL
            filename = profile_image.split('/uploads/profiles/')[-1]
            local_path = os.path.join('uploads', 'profiles', filename)
            
            users_with_local_images.append({
                'id': user_id,
                'email': user_data.get('email', 'Email n√£o dispon√≠vel'),
                'profile_image_url': profile_image,
                'filename': filename,
                'local_path': local_path,
                'doc_ref': users_collection.document(user_id)
            })
            
            print(f"üì∑ Usu√°rio {user_id}: {profile_image}")
    
    return users_with_local_images

def migrate_image_to_storage(user, storage_client, bucket_name, dry_run=True):
    """
    Migra uma imagem espec√≠fica para o Cloud Storage
    """
    filename = user['filename']
    local_path = user['local_path']
    
    print(f"\nüîÑ Processando: {user['email']} ({filename})")
    
    # Verificar se arquivo existe localmente
    if not os.path.exists(local_path):
        print(f"  ‚ùå Arquivo local n√£o encontrado: {local_path}")
        return False
    
    if dry_run:
        print(f"  üß™ SIMULA√á√ÉO: Faria upload de {local_path} para Cloud Storage")
        return True
    
    try:
        # Fazer upload para Cloud Storage
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(f"profiles/{filename}")
        
        # Upload do arquivo
        blob.upload_from_filename(local_path)
        
        # Tornar p√∫blico
        blob.make_public()
        
        # Nova URL p√∫blica
        new_url = blob.public_url
        
        # Atualizar Firestore
        user['doc_ref'].update({
            'profile_image': new_url
        })
        
        print(f"  ‚úÖ Migra√ß√£o conclu√≠da: {new_url}")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na migra√ß√£o: {e}")
        return False

def migrate_images(db, users_with_local_images, dry_run=True):
    """
    Migra todas as imagens encontradas
    """
    if not users_with_local_images:
        print("‚úÖ Nenhuma imagem local encontrada para migrar!")
        return
    
    print(f"\nüìä Encontradas {len(users_with_local_images)} imagens para migrar")
    
    if dry_run:
        print("üß™ MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° feita")
    else:
        print("‚ö†Ô∏è MODO REAL - Imagens ser√£o migradas permanentemente!")
    
    # Configurar Cloud Storage
    bucket_name = os.getenv('CLOUD_STORAGE_BUCKET_NAME', 'barbearia-app-fotoss')
    
    try:
        storage_client = storage.Client()
        
        # Verificar se bucket existe
        bucket = storage_client.bucket(bucket_name)
        if not bucket.exists():
            print(f"‚ùå Bucket {bucket_name} n√£o existe!")
            return
        
        print(f"‚úÖ Conectado ao bucket: {bucket_name}")
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Cloud Storage: {e}")
        return
    
    # Migrar cada imagem
    success_count = 0
    for user in users_with_local_images:
        if migrate_image_to_storage(user, storage_client, bucket_name, dry_run):
            success_count += 1
    
    print(f"\nüìä RESUMO:")
    print(f"Total de imagens processadas: {len(users_with_local_images)}")
    print(f"Migra√ß√µes bem-sucedidas: {success_count}")
    
    if dry_run:
        print("\nüí° Para executar a migra√ß√£o real, execute: python migrate_images_to_storage.py --execute")
    else:
        print("\n‚úÖ Migra√ß√£o conclu√≠da! As imagens agora est√£o no Cloud Storage.")

def main():
    """Fun√ß√£o principal"""
    
    # Verificar argumentos
    dry_run = '--execute' not in sys.argv
    
    if dry_run:
        print("üß™ Executando em MODO SIMULA√á√ÉO")
    else:
        print("‚ö†Ô∏è Executando em MODO REAL - CUIDADO!")
        response = input("Tem certeza que deseja migrar as imagens para Cloud Storage? Digite 'SIM' para confirmar: ")
        if response != 'SIM':
            print("Opera√ß√£o cancelada.")
            return
    
    # Inicializar Firebase
    db = initialize_firebase()
    print("‚úÖ Firebase inicializado com sucesso")
    
    # Encontrar usu√°rios com imagens locais
    users_with_local_images = find_users_with_local_images(db)
    
    # Migrar imagens
    migrate_images(db, users_with_local_images, dry_run)
    
    print("\n‚úÖ Script conclu√≠do!")

if __name__ == "__main__":
    main()