#!/usr/bin/env python3
"""
Script para detectar e limpar endere√ßos corrompidos no Firestore.

Este script encontra usu√°rios com campos de endere√ßo que n√£o podem ser descriptografados
e os remove ou repara, evitando erros na aplica√ß√£o.
"""

import firebase_admin
from firebase_admin import firestore, credentials
import json
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar decrypt_data
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from encryption_utils import decrypt_data
except ImportError:
    print("ERRO: N√£o foi poss√≠vel importar encryption_utils. Certificar que o arquivo existe.")
    sys.exit(1)

def initialize_firebase():
    """Inicializa o Firebase Admin SDK"""
    try:
        # Tentar usar as credenciais padr√£o do ambiente
        if not firebase_admin._apps:
            firebase_admin.initialize_app()
        return firestore.client()
    except Exception as e:
        print(f"Erro ao inicializar Firebase: {e}")
        sys.exit(1)

def find_corrupted_addresses(db):
    """
    Encontra usu√°rios com endere√ßos corrompidos que n√£o podem ser descriptografados
    """
    print("üîç Procurando usu√°rios com endere√ßos corrompidos...")
    
    corrupted_users = []
    
    # Buscar todos os usu√°rios
    users_collection = db.collection('usuarios')
    
    for doc in users_collection.stream():
        user_data = doc.to_dict()
        user_id = doc.id
        
        # Verificar se tem endere√ßo
        endereco = user_data.get('endereco')
        if endereco and isinstance(endereco, dict):
            has_corruption = False
            corrupted_fields = []
            
            for field, encrypted_value in endereco.items():
                if encrypted_value and isinstance(encrypted_value, str):
                    try:
                        # Tentar descriptografar
                        decrypted = decrypt_data(encrypted_value)
                        # Se chegou at√© aqui, est√° OK
                    except Exception as e:
                        has_corruption = True
                        corrupted_fields.append(field)
                        print(f"‚ùå Usu√°rio {user_id}: Campo '{field}' corrompido - {str(e)}")
            
            if has_corruption:
                try:
                    # Tentar descriptografar nome para identifica√ß√£o
                    nome = decrypt_data(user_data.get('nome', 'Nome n√£o dispon√≠vel'))
                except:
                    nome = '[Erro ao descriptografar nome]'
                
                corrupted_users.append({
                    'id': user_id,
                    'nome': nome,
                    'email': user_data.get('email', 'Email n√£o dispon√≠vel'),
                    'corrupted_fields': corrupted_fields,
                    'doc_ref': users_collection.document(user_id)
                })
    
    return corrupted_users

def display_corrupted_users(corrupted_users):
    """Exibe informa√ß√µes sobre os usu√°rios com endere√ßos corrompidos"""
    if not corrupted_users:
        print("‚úÖ Nenhum usu√°rio com endere√ßo corrompido encontrado!")
        return False
    
    print(f"\nüö® Encontrados {len(corrupted_users)} usu√°rios com endere√ßos corrompidos:\n")
    
    for user in corrupted_users:
        print(f"ID: {user['id']}")
        print(f"Nome: {user['nome']}")
        print(f"Email: {user['email']}")
        print(f"Campos corrompidos: {', '.join(user['corrupted_fields'])}")
        print("-" * 80)
    
    return True

def fix_corrupted_addresses(db, corrupted_users, dry_run=True):
    """
    Remove os campos de endere√ßo corrompidos dos usu√°rios
    
    Args:
        db: Cliente do Firestore
        corrupted_users: Lista de usu√°rios com endere√ßos corrompidos
        dry_run: Se True, apenas simula a corre√ß√£o sem executar
    """
    
    if dry_run:
        print("\nüß™ MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° feita no banco")
    else:
        print("\n‚ö†Ô∏è MODO REAL - Endere√ßos corrompidos ser√£o removidos!")
    
    for user in corrupted_users:
        print(f"\nProcessando usu√°rio: {user['nome']} ({user['id']})")
        
        if dry_run:
            print(f"  üìã SIMULA√á√ÉO: Removeria campo 'endereco' corrompido")
        else:
            try:
                # Remover o campo endereco completamente
                user['doc_ref'].update({'endereco': firestore.DELETE_FIELD})
                print(f"  ‚úÖ Campo 'endereco' removido com sucesso")
            except Exception as e:
                print(f"  ‚ùå Erro ao remover campo 'endereco': {e}")
    
    print(f"\nüìä RESUMO:")
    print(f"Total de usu√°rios com endere√ßos corrompidos: {len(corrupted_users)}")
    
    if dry_run:
        print("\nüí° Para executar a corre√ß√£o real, execute: python fix_corrupted_addresses.py --execute")
    else:
        print("\n‚úÖ Corre√ß√£o conclu√≠da! Os usu√°rios agora podem ser sincronizados normalmente.")

def main():
    """Fun√ß√£o principal"""
    
    # Verificar argumentos
    dry_run = '--execute' not in sys.argv
    
    if dry_run:
        print("üß™ Executando em MODO SIMULA√á√ÉO")
    else:
        print("‚ö†Ô∏è Executando em MODO REAL - CUIDADO!")
        response = input("Tem certeza que deseja remover endere√ßos corrompidos? Digite 'SIM' para confirmar: ")
        if response != 'SIM':
            print("Opera√ß√£o cancelada.")
            return
    
    # Inicializar Firebase
    db = initialize_firebase()
    print("‚úÖ Firebase inicializado com sucesso")
    
    # Encontrar endere√ßos corrompidos
    corrupted_users = find_corrupted_addresses(db)
    
    # Exibir usu√°rios corrompidos
    has_corruption = display_corrupted_users(corrupted_users)
    
    if has_corruption:
        # Corrigir endere√ßos corrompidos
        fix_corrupted_addresses(db, corrupted_users, dry_run)
    
    print("\n‚úÖ Script conclu√≠do!")

if __name__ == "__main__":
    main()